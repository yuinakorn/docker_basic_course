-- mysql
SELECT 
left(t_visit.vst_date,16) AS service_date_time,
t_person.cid AS cid,
(SELECT hcode FROM t_config LIMIT 1) AS hcode,
t_invoice.total AS total_amout,
t_invoice.invoice_number AS invoice_number,
t_visit.vn,
  '{{ $json.data }}' AS token
,t_fdh_send_flag.flag
,t_fdh_send_flag.`status`
 FROM t_visit
INNER JOIN t_invoice ON t_visit.vn = t_invoice.vn AND t_visit.hn = t_invoice.hn
INNER JOIN t_person ON t_person.hn = t_visit.hn
LEFT JOIN t_fdh_send_flag ON t_invoice.invoice_number = t_fdh_send_flag.invoice_number AND t_invoice.vn = t_fdh_send_flag.vn 
AND t_person.cid = t_fdh_send_flag.cid 
WHERE t_visit.vst_date BETWEEN DATE_SUB(NOW(), INTERVAL 1 DAY) AND NOW()
-- (t_fdh_send_flag.flag <> '1' OR t_fdh_send_flag.flag is NULL) AND (t_fdh_send_flag.`status` <> '200' OR t_fdh_send_flag.`status` IS NULL)




// Function เพื่อส่ง API request
async function sendApiRequest(item) {
  const { service_date_time, cid, hcode, total_amout, invoice_number, vn, token } = item.json;

  const headers = {
    'Content-Type': 'application/json',
    "Authorization": `Bearer ${token}`
  };
  
  const body = {
    service_date_time,
    cid,
    hcode,
    total_amout: total_amout.toString(),
    invoice_number: invoice_number.toString(),
    vn: vn.toString()
  };

  const options = {
    method: 'POST',
    url: 'https://fdh.moph.go.th/api/v1/reservation',
    headers: headers,
    body: body,
    json: true // This line indicates that the body is JSON
  };

  try {
    const response = await this.helpers.request(options);
    item.json.apiResponse = response;
    item.json.status = response.status.toString();
    item.json.transaction_uid = response.data.transaction_uid;
    delete(item.json.token);
  } catch (error) {
    // จัดการ error
    if (error.response && error.response.body) {
      item.json.apiResponse = error.response.body;
      item.json.status = error.message.substring(0,3).toString();
      let error_msg = JSON.parse(error.message.substring(6));
      item.json.transaction_uid = error_msg.data.transaction_uid;
      delete(item.json.token);
    } else {
      item.json.apiResponse = error.message;
      item.json.status = error.message.substring(0,3).toString();
      let error_msg = JSON.parse(error.message.substring(6));
      item.json.transaction_uid = error_msg.data.transaction_uid;
      delete(item.json.token);
    }
  }
  
  return item;
}

// ใช้ Promise.all เพื่อรอให้ทุก request เสร็จสิ้น
const results = await Promise.all($input.all().map(item => sendApiRequest(item)));

// return ค่า results ที่รวม response จาก API
return results;